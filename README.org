* naolo

Clean Architecture Example of the Pet Clinic, providing alternative Presenters and Gateway implementations.

** Module Dependencies

   One of the most important aspects of a [[https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html][Clean Architecture]] is that your main
   business code should not have a dependency upon any third-party code. e.g. a
   Web Framework, or a Database. These aspects should be made available through
   a plugin architecture. Your code provides a set of interfaces that these
   plugins implement. The following diagrams show two different arrangements of
   the project using different sets of plugins.

*** Using Spring

    A REST web interface is implemented using [[https://spring.io/projects/spring-hateoas][Spring HATEOAS]] and database
    services using [[https://spring.io/projects/spring-data][Spring Data]]. These are provided as plugins using the
    =presenter-rest-spring= and =gateway-data-spring= modules.

    This configuration uses [[https://spring.io/projects/spring-boot][Spring Boot]] as its environment, via the
    =run-spring-boot= module.

   [[file:/doc/images/module-dependencies-spring.png]]

*** Using JAX-RS and DeltaSpike Data

    A REST web interface is implemented using [[https://jax-rs.github.io/apidocs/2.1/][JAX-RS]] and database services using
    [[https://deltaspike.apache.org/documentation/data.html][DeltaSpike Data]]. These are provided as plugins using the
    =presenter-rest-jaxrs= and =gateway-data-deltaspike= modules.

    This configuration uses [[http://openwebbeans.apache.org/meecrowave/][Meecrowave]] as its environment, via the
    =run-meecrowave= module.

   [[file:/doc/images/module-dependencies-meecrowave.png]]

