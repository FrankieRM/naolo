* naolo

  Clean Architecture Example of the Pet Clinic, providing alternative Presenters and Gateway implementations.

  * The original [[https://github.com/spring-projects/spring-petclinic][Spring PetClinic Sample Application]], which this project takes as its inspiration.


** Clean Architecture and Plugins

   One of the most important aspects of a [[https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html][Clean Architecture]] is that your main
   business code should not have a dependency upon any third-party code. e.g. a
   Web Framework, or a Database. These aspects should be made available through
   a plugin architecture. Your code provides a set of interfaces that these
   plugins implement. The following diagrams show two different arrangements of
   the project using different sets of plugins.


** Implementations

   There are two implementations of the example provided, both based on the same
   =core= and =entites= modules. Each provides a different implementation of the
   =presenter-rest= and =gateway-data= plugins.


*** Spring Boot, with Spring HATEOAS and Spring Data

    A REST web interface is implemented using [[https://spring.io/projects/spring-hateoas][Spring HATEOAS]] and database
    services using [[https://spring.io/projects/spring-data][Spring Data]]. These are provided as plugins using the
    =presenter-rest-spring= and =gateway-data-spring= modules.

    This configuration uses [[https://spring.io/projects/spring-boot][Spring Boot]] as its environment, via the
    =run-spring-boot= module.

    [[file:/doc/images/module-dependencies-spring.png]]

    The Spring version can be built and run from source using:

    #+BEGIN_SRC bash
    ./bin/spring-boot-run.sh
    #+END_SRC


*** Apache Meecrowave with JAX-RS and Apache DeltaSpike Data

    A REST web interface is implemented using [[https://jax-rs.github.io/apidocs/2.1/][JAX-RS]] and database services using
    [[https://deltaspike.apache.org/documentation/data.html][DeltaSpike Data]]. These are provided as plugins using the
    =presenter-rest-jaxrs= and =gateway-data-deltaspike= modules.

    This configuration uses [[http://openwebbeans.apache.org/meecrowave/][Meecrowave]] as its environment, via the
    =run-meecrowave= module.

    [[file:/doc/images/module-dependencies-meecrowave.png]]

    The Meecrowave version can be built and run from source using:

    #+BEGIN_SRC bash
    ./bin/meecrowave-run.sh
    #+END_SRC


** Pet Clinic

   Rather that attempt to implement the full website from the original example,
   I will be focusing on providing the services as a REST endpoint, upon which
   another application/service could be used to provide the website.


*** Entities

   The PetClinic has the following domain:

   [[file:/doc/images/entities.png]]


**** Veterinarians


***** Id


***** Name


***** Speciality (optional)


**** Owners


***** Id


***** First Name


***** Last Name


***** Street


***** City


***** Telephone Number


**** Pets


***** Id


***** Name


***** Date-of-birth


***** Type

      Dog, cat, etc


***** Owner


**** Visits


***** Id


***** Pet


***** Veterinarian


***** Date


***** Description


*** Values


**** Vet Specialisation


***** Radiology


***** Dentistry


***** Surgery


**** Pet Type


*** Aggregate Roots

    Vets and Visit are the two Aggregate Roots. Pets and Owners can't exist in
    the system without being associated with at least one Visit.
